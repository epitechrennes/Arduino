<?xml version="1.0" encoding="UTF-8" ?>
<ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="1">
    <Box>
        <name>root</name>
        <robot></robot>
        <id>-1</id>
        <tooltip>Root box of Choregraphe&apos;s project. Highest level possible.</tooltip>
        <bitmap_expanded>1</bitmap_expanded>
        <Bitmaps>
            <bitmap>media/images/box/root.png</bitmap>
        </Bitmaps>
        <plugin></plugin>
        <x>0</x>
        <y>0</y>
        <script>
            <content>
                <![CDATA[]]>
</content>
            <language>4</language>
        </script>
        <Input>
            <name>onLoad</name>
            <type>1</type>
            <type_size>1</type_size>
            <nature>0</nature>
            <inner>1</inner>
            <tooltip>Signal sent when diagram is loaded.</tooltip>
            <id>1</id>
        </Input>
        <Input>
            <name>onStart</name>
            <type>1</type>
            <type_size>1</type_size>
            <nature>2</nature>
            <inner>0</inner>
            <tooltip>Box behavior starts when a signal is received on this input.</tooltip>
            <id>2</id>
        </Input>
        <Input>
            <name>onStop</name>
            <type>1</type>
            <type_size>1</type_size>
            <nature>3</nature>
            <inner>0</inner>
            <tooltip>Box behavior stops when a signal is received on this input.</tooltip>
            <id>3</id>
        </Input>
        <Output>
            <name>onStopped</name>
            <type>1</type>
            <type_size>1</type_size>
            <nature>1</nature>
            <inner>0</inner>
            <tooltip>Signal sent when box behavior is finished.</tooltip>
            <id>4</id>
        </Output>
        <Timeline>
            <fps>10</fps>
            <resources_acquisition>0</resources_acquisition>
            <size>300</size>
            <enable>0</enable>
            <start_frame>0</start_frame>
            <end_frame>-1</end_frame>
            <Waveforms />
            <scale>10</scale>
            <watches />
            <BehaviorLayer>
                <name>behavior_layer1</name>
                <mute>0</mute>
                <BehaviorKeyframe>
                    <name>keyframe1</name>
                    <index>1</index>
                    <bitmap></bitmap>
                    <Diagram>
                        <scale>-1</scale>
                        <Box>
                            <name>Enter name here</name>
                            <robot></robot>
                            <id>2</id>
                            <tooltip>Enter tooltip here</tooltip>
                            <bitmap_expanded>1</bitmap_expanded>
                            <Bitmaps />
                            <plugin>localizationbox_plugin</plugin>
                            <x>83</x>
                            <y>26</y>
                            <script>
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sEnglish = "It's hot there!"
		sFrench = "Il fait super chaud ici!"
		sSpanish = ""
		sItalian = ""
		sGerman = ""
		sChinese = ""
		sPolish = ""
		sKorean = ""
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                <language>4</language>
                            </script>
                            <pluginContent>
                                <english>It&apos;s hot there!</english>
                                <french>Il fait super chaud ici!</french>
                                <spanish></spanish>
                                <italian></italian>
                                <german></german>
                                <chinese></chinese>
                                <polish></polish>
                                <korean></korean>
                                <language>0</language>
                            </pluginContent>
                            <Input>
                                <name>onLoad</name>
                                <type>1</type>
                                <type_size>1</type_size>
                                <nature>0</nature>
                                <inner>1</inner>
                                <tooltip>Signal sent when diagram is loaded.</tooltip>
                                <id>1</id>
                            </Input>
                            <Input>
                                <name>onStart</name>
                                <type>1</type>
                                <type_size>1</type_size>
                                <nature>2</nature>
                                <inner>0</inner>
                                <tooltip>Box behavior starts when a signal is received on this input.</tooltip>
                                <id>2</id>
                            </Input>
                            <Input>
                                <name>onStop</name>
                                <type>1</type>
                                <type_size>1</type_size>
                                <nature>3</nature>
                                <inner>0</inner>
                                <tooltip>Box behavior stops when a signal is received on this input.</tooltip>
                                <id>3</id>
                            </Input>
                            <Output>
                                <name>onStopped</name>
                                <type>3</type>
                                <type_size>1</type_size>
                                <nature>1</nature>
                                <inner>0</inner>
                                <tooltip>Signal sent when box behavior is finished.</tooltip>
                                <id>4</id>
                            </Output>
                        </Box>
                        <Box>
                            <name>SayTextPrerender_ref</name>
                            <robot></robot>
                            <id>1</id>
                            <tooltip>Receive a string, precompute it, then say it!&#x0A;All steps are outputted to add synchro or interesting behaviors...&#x0A;&#x0A;v1.1</tooltip>
                            <bitmap_expanded>1</bitmap_expanded>
                            <Bitmaps>
                                <bitmap>media/images/box/icons_appu/sayPrecomputed.png</bitmap>
                            </Bitmaps>
                            <plugin></plugin>
                            <x>330</x>
                            <y>26</y>
                            <script>
                                <content>
                                    <![CDATA[# SayTextPrerender - v1.1
import altools

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.nStateInit = 0;
        self.nStatePreparing = 1;
        self.nStateSpeaking = 2;
        self.nStateStopped = 3;
        
    def onLoad(self):
        self.nStep = self.nStateInit;
        self.bStopped = False;
    
    def onUnload(self):
        self.onInput_onStop();

    def onInput_onStart(self, p):
        if( self.nStep == self.nStateSpeaking or self.nStep == self.nStatePreparing ):
            self.log( "%s: already speaking, won't say that sentence: '%s'" % ( self.boxName, p ) );
            return;

        self.bStopped = False;
        txt = p;
        self.nStep = self.nStatePreparing;
        self.output_onPreparing();
        if( self.getParameter( "bWithLight" ) ):
            altools.sayAndCacheAndLight( txt, True, self.getParameter( 'bStoreToNonVolatilePath' ), nUseLang = self.getParameter( 'nNumLanguage' ) );
        else:
            altools.sayAndCache( txt, True, self.getParameter( 'bStoreToNonVolatilePath' ), nUseLang = self.getParameter( 'nNumLanguage' ) );
        self.output_onPrepared();            
        if( not self.getParameter( 'bJustPrepare' ) ):
            if( not self.bStopped ):
                self.nStep = self.nStateSpeaking;
                self.output_onStartSpeaking();
                if( self.getParameter( "bWithLight" ) ):
                    altools.sayAndCacheAndLight( txt, nUseLang = self.getParameter( 'nNumLanguage' ) );
                else:
                    altools.sayAndCache( txt, nUseLang = self.getParameter( 'nNumLanguage' ) );
                self.output_onStopSpeaking();            
        else:
            pass
        self.nStep = self.nStateStopped;
    
    def onInput_onStop(self):
        nCpt = 0;
        # adding a timeout
        nMaxCpt = 60;
        self.bStopped = True;
        while( self.nStep == self.nStatePreparing and nCpt <= nMaxCpt ): # can't kill while preparing
            print( "%s.onStop: waiting to stop than the sound is prepared..." % self.boxName );
            time.sleep( 0.5 );
            nCpt += 1;
        if( nCpt > nMaxCpt ):
            altools.playSound( 'warning_speech_error.wav' );
        # on le fait plusieurs fois car des fois on peut se trouver pile entre le set du play et le lancage de la commande
        for i in range( 3 ):
            if( self.nStep == self.nStateSpeaking ):
                altools.mySystemCall( "killall aplay" );     # todo: better killling method!
                time.sleep( 0.2 );]]>
</content>
                                <language>4</language>
                            </script>
                            <Input>
                                <name>onLoad</name>
                                <type>1</type>
                                <type_size>1</type_size>
                                <nature>0</nature>
                                <inner>1</inner>
                                <tooltip>Signal sent when diagram is loaded.</tooltip>
                                <id>1</id>
                            </Input>
                            <Input>
                                <name>onStart</name>
                                <type>3</type>
                                <type_size>1</type_size>
                                <nature>2</nature>
                                <inner>0</inner>
                                <tooltip>Box behavior starts when a signal is received on this input.</tooltip>
                                <id>2</id>
                            </Input>
                            <Input>
                                <name>onStop</name>
                                <type>1</type>
                                <type_size>1</type_size>
                                <nature>3</nature>
                                <inner>0</inner>
                                <tooltip>Box behavior stops when a signal is received on this input.</tooltip>
                                <id>3</id>
                            </Input>
                            <Output>
                                <name>output_onPreparing</name>
                                <type>1</type>
                                <type_size>1</type_size>
                                <nature>2</nature>
                                <inner>0</inner>
                                <tooltip>Text are being prepared</tooltip>
                                <id>4</id>
                            </Output>
                            <Output>
                                <name>output_onPrepared</name>
                                <type>1</type>
                                <type_size>1</type_size>
                                <nature>2</nature>
                                <inner>0</inner>
                                <tooltip>the sound is prepared and ready to be launched</tooltip>
                                <id>5</id>
                            </Output>
                            <Output>
                                <name>output_onStartSpeaking</name>
                                <type>1</type>
                                <type_size>1</type_size>
                                <nature>2</nature>
                                <inner>0</inner>
                                <tooltip>Nao begin to speak</tooltip>
                                <id>6</id>
                            </Output>
                            <Output>
                                <name>output_onStopSpeaking</name>
                                <type>1</type>
                                <type_size>1</type_size>
                                <nature>2</nature>
                                <inner>0</inner>
                                <tooltip>Nao has stop speaking</tooltip>
                                <id>7</id>
                            </Output>
                            <Parameter>
                                <name>bWithLight</name>
                                <inherits_from_parent>0</inherits_from_parent>
                                <content_type>0</content_type>
                                <value>1</value>
                                <default_value>1</default_value>
                                <tooltip>use light in eyes to speak</tooltip>
                                <id>8</id>
                            </Parameter>
                            <Parameter>
                                <name>bJustPrepare</name>
                                <inherits_from_parent>0</inherits_from_parent>
                                <content_type>0</content_type>
                                <value>0</value>
                                <default_value>0</default_value>
                                <tooltip>Don&apos;t say the text now, just generate it.</tooltip>
                                <id>9</id>
                            </Parameter>
                            <Parameter>
                                <name>bStoreToNonVolatilePath</name>
                                <inherits_from_parent>0</inherits_from_parent>
                                <content_type>0</content_type>
                                <value>1</value>
                                <default_value>1</default_value>
                                <tooltip>copy the generated file to a non volatile path.</tooltip>
                                <id>10</id>
                            </Parameter>
                            <Parameter>
                                <name>nNumLanguage</name>
                                <inherits_from_parent>0</inherits_from_parent>
                                <content_type>1</content_type>
                                <value>-1</value>
                                <default_value>-1</default_value>
                                <min>-1</min>
                                <max>30</max>
                                <tooltip>To speak with a different speak language, specify it there (default -1: current one)</tooltip>
                                <id>11</id>
                            </Parameter>
                        </Box>
                        <Box>
                            <name>Randomly</name>
                            <robot></robot>
                            <id>4</id>
                            <tooltip>Enter tooltip here</tooltip>
                            <bitmap_expanded>1</bitmap_expanded>
                            <Bitmaps>
                                <bitmap>media/images/box/box-diagram.png</bitmap>
                            </Bitmaps>
                            <plugin></plugin>
                            <x>183</x>
                            <y>274</y>
                            <script>
                                <content>
                                    <![CDATA[import random
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)

    def onLoad(self):
        #~ puts code for box initialization here
        pass

    def onUnload(self):
        #~ puts code for box cleanup here
        pass

    def onInput_onStart(self):
        if( random.random() < 0.5 ):
            self.output_sometimes();
        else:
            self.output_other_times();]]>
</content>
                                <language>4</language>
                            </script>
                            <Input>
                                <name>onLoad</name>
                                <type>1</type>
                                <type_size>1</type_size>
                                <nature>0</nature>
                                <inner>1</inner>
                                <tooltip>Signal sent when diagram is loaded.</tooltip>
                                <id>1</id>
                            </Input>
                            <Input>
                                <name>onStart</name>
                                <type>1</type>
                                <type_size>1</type_size>
                                <nature>2</nature>
                                <inner>0</inner>
                                <tooltip>Box behavior starts when a signal is received on this input.</tooltip>
                                <id>2</id>
                            </Input>
                            <Output>
                                <name>output_sometimes</name>
                                <type>1</type>
                                <type_size>1</type_size>
                                <nature>2</nature>
                                <inner>0</inner>
                                <tooltip></tooltip>
                                <id>3</id>
                            </Output>
                            <Output>
                                <name>output_other_times</name>
                                <type>1</type>
                                <type_size>1</type_size>
                                <nature>2</nature>
                                <inner>0</inner>
                                <tooltip>Signal sent when box behavior is finished.</tooltip>
                                <id>4</id>
                            </Output>
                        </Box>
                        <Box>
                            <name>SayTextPrerender_ref</name>
                            <robot></robot>
                            <id>5</id>
                            <tooltip>Receive a string, precompute it, then say it!&#x0A;All steps are outputted to add synchro or interesting behaviors...&#x0A;&#x0A;v1.1</tooltip>
                            <bitmap_expanded>1</bitmap_expanded>
                            <Bitmaps>
                                <bitmap>media/images/box/icons_appu/sayPrecomputed.png</bitmap>
                            </Bitmaps>
                            <plugin></plugin>
                            <x>359</x>
                            <y>558</y>
                            <script>
                                <content>
                                    <![CDATA[# SayTextPrerender - v1.1
import altools

class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self);
        self.nStateInit = 0;
        self.nStatePreparing = 1;
        self.nStateSpeaking = 2;
        self.nStateStopped = 3;
        
    def onLoad(self):
        self.nStep = self.nStateInit;
        self.bStopped = False;
    
    def onUnload(self):
        self.onInput_onStop();

    def onInput_onStart(self, p):
        if( self.nStep == self.nStateSpeaking or self.nStep == self.nStatePreparing ):
            self.log( "%s: already speaking, won't say that sentence: '%s'" % ( self.boxName, p ) );
            return;

        self.bStopped = False;
        txt = p;
        self.nStep = self.nStatePreparing;
        self.output_onPreparing();
        if( self.getParameter( "bWithLight" ) ):
            altools.sayAndCacheAndLight( txt, True, self.getParameter( 'bStoreToNonVolatilePath' ), nUseLang = self.getParameter( 'nNumLanguage' ) );
        else:
            altools.sayAndCache( txt, True, self.getParameter( 'bStoreToNonVolatilePath' ), nUseLang = self.getParameter( 'nNumLanguage' ) );
        self.output_onPrepared();            
        if( not self.getParameter( 'bJustPrepare' ) ):
            if( not self.bStopped ):
                self.nStep = self.nStateSpeaking;
                self.output_onStartSpeaking();
                if( self.getParameter( "bWithLight" ) ):
                    altools.sayAndCacheAndLight( txt, nUseLang = self.getParameter( 'nNumLanguage' ) );
                else:
                    altools.sayAndCache( txt, nUseLang = self.getParameter( 'nNumLanguage' ) );
                self.output_onStopSpeaking();            
        else:
            pass
        self.nStep = self.nStateStopped;
    
    def onInput_onStop(self):
        nCpt = 0;
        # adding a timeout
        nMaxCpt = 60;
        self.bStopped = True;
        while( self.nStep == self.nStatePreparing and nCpt <= nMaxCpt ): # can't kill while preparing
            print( "%s.onStop: waiting to stop than the sound is prepared..." % self.boxName );
            time.sleep( 0.5 );
            nCpt += 1;
        if( nCpt > nMaxCpt ):
            altools.playSound( 'warning_speech_error.wav' );
        # on le fait plusieurs fois car des fois on peut se trouver pile entre le set du play et le lancage de la commande
        for i in range( 3 ):
            if( self.nStep == self.nStateSpeaking ):
                altools.mySystemCall( "killall aplay" );     # todo: better killling method!
                time.sleep( 0.2 );]]>
</content>
                                <language>4</language>
                            </script>
                            <Input>
                                <name>onLoad</name>
                                <type>1</type>
                                <type_size>1</type_size>
                                <nature>0</nature>
                                <inner>1</inner>
                                <tooltip>Signal sent when diagram is loaded.</tooltip>
                                <id>1</id>
                            </Input>
                            <Input>
                                <name>onStart</name>
                                <type>3</type>
                                <type_size>1</type_size>
                                <nature>2</nature>
                                <inner>0</inner>
                                <tooltip>Box behavior starts when a signal is received on this input.</tooltip>
                                <id>2</id>
                            </Input>
                            <Input>
                                <name>onStop</name>
                                <type>1</type>
                                <type_size>1</type_size>
                                <nature>3</nature>
                                <inner>0</inner>
                                <tooltip>Box behavior stops when a signal is received on this input.</tooltip>
                                <id>3</id>
                            </Input>
                            <Output>
                                <name>output_onPreparing</name>
                                <type>1</type>
                                <type_size>1</type_size>
                                <nature>2</nature>
                                <inner>0</inner>
                                <tooltip>Text are being prepared</tooltip>
                                <id>4</id>
                            </Output>
                            <Output>
                                <name>output_onPrepared</name>
                                <type>1</type>
                                <type_size>1</type_size>
                                <nature>2</nature>
                                <inner>0</inner>
                                <tooltip>the sound is prepared and ready to be launched</tooltip>
                                <id>5</id>
                            </Output>
                            <Output>
                                <name>output_onStartSpeaking</name>
                                <type>1</type>
                                <type_size>1</type_size>
                                <nature>2</nature>
                                <inner>0</inner>
                                <tooltip>Nao begin to speak</tooltip>
                                <id>6</id>
                            </Output>
                            <Output>
                                <name>output_onStopSpeaking</name>
                                <type>1</type>
                                <type_size>1</type_size>
                                <nature>2</nature>
                                <inner>0</inner>
                                <tooltip>Nao has stop speaking</tooltip>
                                <id>7</id>
                            </Output>
                            <Parameter>
                                <name>bWithLight</name>
                                <inherits_from_parent>0</inherits_from_parent>
                                <content_type>0</content_type>
                                <value>1</value>
                                <default_value>1</default_value>
                                <tooltip>use light in eyes to speak</tooltip>
                                <id>8</id>
                            </Parameter>
                            <Parameter>
                                <name>bJustPrepare</name>
                                <inherits_from_parent>0</inherits_from_parent>
                                <content_type>0</content_type>
                                <value>0</value>
                                <default_value>0</default_value>
                                <tooltip>Don&apos;t say the text now, just generate it.</tooltip>
                                <id>9</id>
                            </Parameter>
                            <Parameter>
                                <name>bStoreToNonVolatilePath</name>
                                <inherits_from_parent>0</inherits_from_parent>
                                <content_type>0</content_type>
                                <value>1</value>
                                <default_value>1</default_value>
                                <tooltip>copy the generated file to a non volatile path.</tooltip>
                                <id>10</id>
                            </Parameter>
                            <Parameter>
                                <name>nNumLanguage</name>
                                <inherits_from_parent>0</inherits_from_parent>
                                <content_type>1</content_type>
                                <value>-1</value>
                                <default_value>-1</default_value>
                                <min>-1</min>
                                <max>30</max>
                                <tooltip>To speak with a different speak language, specify it there (default -1: current one)</tooltip>
                                <id>11</id>
                            </Parameter>
                        </Box>
                        <Box>
                            <name>Enter name here</name>
                            <robot></robot>
                            <id>6</id>
                            <tooltip>Enter tooltip here</tooltip>
                            <bitmap_expanded>1</bitmap_expanded>
                            <Bitmaps />
                            <plugin>localizationbox_plugin</plugin>
                            <x>95</x>
                            <y>558</y>
                            <script>
                                <content>
                                    <![CDATA[class MyClass(GeneratedClass):
	def __init__(self):
		GeneratedClass.__init__(self)
		self.tts = ALProxy("ALTextToSpeech")

	def onInput_onStart(self):
		sEnglish = "I don't know how you can work!"
		sFrench = "Je sais pas comment tu fais pour travailler!"
		sSpanish = ""
		sItalian = ""
		sGerman = ""
		sChinese = ""
		sPolish = ""
		sKorean = ""
		sDefaultLang = self.tts.getLanguage()
		self.onStopped(eval("s"+sDefaultLang))]]>
</content>
                                <language>4</language>
                            </script>
                            <pluginContent>
                                <english>I don&apos;t know how you can work!</english>
                                <french>Je sais pas comment tu fais pour travailler!</french>
                                <spanish></spanish>
                                <italian></italian>
                                <german></german>
                                <chinese></chinese>
                                <polish></polish>
                                <korean></korean>
                                <language>0</language>
                            </pluginContent>
                            <Input>
                                <name>onLoad</name>
                                <type>1</type>
                                <type_size>1</type_size>
                                <nature>0</nature>
                                <inner>1</inner>
                                <tooltip>Signal sent when diagram is loaded.</tooltip>
                                <id>1</id>
                            </Input>
                            <Input>
                                <name>onStart</name>
                                <type>1</type>
                                <type_size>1</type_size>
                                <nature>2</nature>
                                <inner>0</inner>
                                <tooltip>Box behavior starts when a signal is received on this input.</tooltip>
                                <id>2</id>
                            </Input>
                            <Input>
                                <name>onStop</name>
                                <type>1</type>
                                <type_size>1</type_size>
                                <nature>3</nature>
                                <inner>0</inner>
                                <tooltip>Box behavior stops when a signal is received on this input.</tooltip>
                                <id>3</id>
                            </Input>
                            <Output>
                                <name>onStopped</name>
                                <type>3</type>
                                <type_size>1</type_size>
                                <nature>1</nature>
                                <inner>0</inner>
                                <tooltip>Signal sent when box behavior is finished.</tooltip>
                                <id>4</id>
                            </Output>
                        </Box>
                        <Link>
                            <inputowner>2</inputowner>
                            <indexofinput>2</indexofinput>
                            <outputowner>0</outputowner>
                            <indexofoutput>2</indexofoutput>
                        </Link>
                        <Link>
                            <inputowner>1</inputowner>
                            <indexofinput>2</indexofinput>
                            <outputowner>2</outputowner>
                            <indexofoutput>4</indexofoutput>
                        </Link>
                        <Link>
                            <inputowner>4</inputowner>
                            <indexofinput>2</indexofinput>
                            <outputowner>1</outputowner>
                            <indexofoutput>7</indexofoutput>
                        </Link>
                        <Link>
                            <inputowner>5</inputowner>
                            <indexofinput>2</indexofinput>
                            <outputowner>6</outputowner>
                            <indexofoutput>4</indexofoutput>
                        </Link>
                        <Link>
                            <inputowner>0</inputowner>
                            <indexofinput>4</indexofinput>
                            <outputowner>5</outputowner>
                            <indexofoutput>7</indexofoutput>
                        </Link>
                        <Link>
                            <inputowner>0</inputowner>
                            <indexofinput>4</indexofinput>
                            <outputowner>4</outputowner>
                            <indexofoutput>3</indexofoutput>
                        </Link>
                        <Link>
                            <inputowner>6</inputowner>
                            <indexofinput>2</indexofinput>
                            <outputowner>4</outputowner>
                            <indexofoutput>4</indexofoutput>
                        </Link>
                    </Diagram>
                </BehaviorKeyframe>
            </BehaviorLayer>
            <ActuatorList />
        </Timeline>
    </Box>
</ChoregrapheProject>
